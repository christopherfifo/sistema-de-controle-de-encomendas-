// Configuração do Banco de Dados
datasource db {
  provider = "postgresql" // Definido o PostgreSQL como SGBD [cite: 116]
  url      = env("DATABASE_URL") // URL de conexão (deve ser definida no arquivo .env)
}

// Configuração do Gerador de Clientes (o ORM)
generator client {
  provider = "prisma-client-js"
}

// ----------------------------------------------------
// ENUMs (Tipos predefinidos para campos com opções fixas)
// ----------------------------------------------------

enum PerfilUsuario {
  ADMINISTRADOR // Administrador do SaaS
  SINDICO
  PORTEIRO
  MORADOR
}

enum StatusPagamento {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
}

enum TipoRecado {
  DUVIDA
  SUGESTAO
  RECLAMACAO
  AVISO_GERAL
}

// ----------------------------------------------------
// MODELOS (Tabelas do Banco de Dados)
// ----------------------------------------------------

// 1. Condominios (Clientes do SaaS)
model Condominio {
  id_condominio     String @id @default(uuid()) // Chave primária UUID
  nome_condominio   String
  cnpj              String @unique // CNPJ deve ser único
  logradouro        String
  numero            String
  bairro            String
  cidade            String
  uf                String @db.Char(2)
  qtd_unidades      Int
  qtd_blocos_torres Int

  // Vínculo com Planos (1:N)
  id_plano String
  plano    Plano  @relation(fields: [id_plano], references: [id_plano])

  data_adesao       DateTime @default(now())
  ativo             Boolean  @default(true)
  identidade_visual Json? // Para cores, logo, etc.

  // Relações com outras tabelas
  usuarios Usuario[]
  unidades Unidade[]
  faturas  Fatura[]
  recados  Recado[]
}

// 2. Planos (Catálogo de Assinaturas)
model Plano {
  id_plano        String   @id @default(uuid())
  nome_plano      String   @unique
  valor           Decimal  @db.Decimal(10, 2)
  limite_unidades Int
  data_inclusao   DateTime @default(now())

  // Relações
  condominios Condominio[]
  faturas     Fatura[]
}

// 3. Usuarios (Todos que acessam: Moradores, Porteiros, Síndicos, Admins)
model Usuario {
  id_usuario    String        @id @default(uuid())
  nome_completo String
  cpf           String        @unique
  email         String        @unique // Para login
  telefone      String
  senha_hash    String // Senha criptografada
  perfil        PerfilUsuario
  ativo         Boolean       @default(true)
  data_criacao  DateTime      @default(now())

  // Vínculo com Condomínio (N:1)
  id_condominio String
  condominio    Condominio @relation(fields: [id_condominio], references: [id_condominio])

  // Relações
  unidades_residenciais  MoradoresUnidades[]
  recados_enviados       Recado[]
  respostas_dadas        RespostaRecado[]
  encomendas_recebidas   Encomenda[]         @relation("PorteiroRecebeu")
  retiradas_feitas       Retirada[]
  notificacoes_recebidas Notificacao[]
}

// 4. Unidades (Apartamentos/Casas)
model Unidade {
  id_unidade String @id @default(uuid())

  // Vínculo com Condomínio (N:1) - Adicionado o campo de relação
  id_condominio String
  condominio    Condominio @relation(fields: [id_condominio], references: [id_condominio])

  bloco_torre    String
  numero_unidade String

  // Relações
  moradores  MoradoresUnidades[]
  encomendas Encomenda[]

  // Índices para garantir que o número da unidade seja único DENTRO de um bloco/torre.
  @@unique([id_condominio, bloco_torre, numero_unidade])
}

// 5. MoradoresUnidades (Vínculo Morador/Unidade)
model MoradoresUnidades {
  id_morador_unidade String  @id @default(uuid())
  principal          Boolean @default(false)

  // Vínculos (N:1)
  id_usuario String
  usuario    Usuario @relation(fields: [id_usuario], references: [id_usuario])
  id_unidade String
  unidade    Unidade @relation(fields: [id_unidade], references: [id_unidade])

  // Garante que um usuário não seja cadastrado duas vezes na mesma unidade
  @@unique([id_usuario, id_unidade])
}

// 6. Encomendas (O core do sistema)
model Encomenda {
  id_encomenda String @id @default(uuid())

  // Vínculo com a Unidade Destinatária
  id_unidade String
  unidade    Unidade @relation(fields: [id_unidade], references: [id_unidade])

  // Vínculo com o Porteiro que Recebeu
  id_porteiro_recebimento String
  porteiro_recebimento    Usuario @relation("PorteiroRecebeu", fields: [id_porteiro_recebimento], references: [id_usuario])

  tipo_encomenda   String
  tamanho          String
  forma_entrega    String
  codigo_rastreio  String? // Opcional
  condicao         String
  data_recebimento DateTime @default(now())
  status           String // Ex: AGUARDANDO_RETIRADA, RETIRADA, RECUSADA
  url_foto_pacote  String

  // Relações
  retirada     Retirada? // 1:1, uma encomenda pode ter no máximo uma retirada
  notificacoes Notificacao[]
}

// 7. Retiradas (Comprovante de Saída)
model Retirada {
  id_retirada String @id @default(uuid())

  // Vínculo 1:1 com Encomenda
  id_encomenda String    @unique // Garante 1:1
  encomenda    Encomenda @relation(fields: [id_encomenda], references: [id_encomenda])

  id_usuario_retirada String
  usuario_retirada    Usuario @relation(fields: [id_usuario_retirada], references: [id_usuario])

  data_retirada     DateTime @default(now())
  forma_confirmacao String
  comprovante       String? // Assinatura digital ou código
}

// 8. Faturas (Gestão Financeira e Inadimplência)
model Fatura {
  id_fatura String @id @default(uuid())

  // Vínculos
  id_condominio String
  condominio    Condominio @relation(fields: [id_condominio], references: [id_condominio])
  id_plano      String
  plano         Plano      @relation(fields: [id_plano], references: [id_plano])

  valor_cobrado    Decimal         @db.Decimal(10, 2)
  data_emissao     DateTime        @default(now())
  data_vencimento  DateTime
  data_pagamento   DateTime? // Nulo se não pago
  status_pagamento StatusPagamento
  inadimplente     Boolean         @default(false) // Campo de inadimplência
  forma_pagamento  String
  link_pagamento   String?
}

// 9. Recados_Feedback (Comunicação)
model Recado {
  id_recado String @id @default(uuid())

  // Vínculos
  id_condominio     String
  condominio        Condominio @relation(fields: [id_condominio], references: [id_condominio])
  id_usuario_origem String
  usuario_origem    Usuario    @relation(fields: [id_usuario_origem], references: [id_usuario])

  tipo_recado   TipoRecado
  assunto       String
  conteudo      String     @db.Text
  status_recado String     @default("ABERTO") // Ex: ABERTO, FECHADO
  data_criacao  DateTime   @default(now())

  // Relações
  respostas RespostaRecado[]
}

// 10. Respostas_Recados
model RespostaRecado {
  id_resposta String @id @default(uuid())

  // Vínculos
  id_recado           String
  recado              Recado  @relation(fields: [id_recado], references: [id_recado])
  id_usuario_resposta String
  usuario_resposta    Usuario @relation(fields: [id_usuario_resposta], references: [id_usuario])

  data_resposta     DateTime @default(now())
  conteudo_resposta String   @db.Text
}

// 11. Notificacoes (Controle de Mensagens)
model Notificacao {
  id_notificacao String @id @default(uuid())

  // Vínculos
  id_encomenda            String
  encomenda               Encomenda @relation(fields: [id_encomenda], references: [id_encomenda])
  id_usuario_destinatario String
  usuario_destinatario    Usuario   @relation(fields: [id_usuario_destinatario], references: [id_usuario])

  tipo_envio   String // Ex: PUSH_APP, WHATSAPP
  mensagem     String   @db.Text
  data_envio   DateTime @default(now())
  status_envio String // Ex: ENVIADA, LIDA, ERRO
}
